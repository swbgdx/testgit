git reset --hard FETCH_HEAD
放弃本地的文件修改和提交，FETCH_HEAD表示上一次成功git pull之后形成的commit点
再运行git pull, 使本地与远程仓库对应分支保持一致

git reset --hard HEAD
放弃本地文件修改，回退到当前最近一次commit提交

HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

git reset --hard commit_id
回退到commit_id指定的版本

git checkout -- <file>
放弃本地工作区的指定文件的修改，让这个文件回到最近一次git commit或git add时的状态
如果该文件已经通过git add，添加到了暂存区，可以使用命令：

远程先开好分支然后拉到本地：
git checkout -b feature-branch origin/feature-branch   //检出远程的feature-branch分支到本地

本地先开好分支然后推送到远程：
git checkout -b feature-branch    //本地创建并切换到分支feature-branch
然后各种在本地修改、提交
git push origin feature-branch:feature-branch   
//推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建)

git branch -d feature1
删除feature1分支

git add <file>  把文件修改添加到暂存区
git rm <file>   用于从暂存区删除一个文件

git merge b  将b分支合并到当前分支,保留当前分支和b分支的commit记录并形成一个新的commit点，git log会保留原始commit的时间顺序
git rebase b 将b分支合并到当前分支,当前分支的commit点移到最后，git log与原始提交时间不能对应

git config --global user.name "yourusername"
git config --global user.email  "youremail"
ssh-keygen -t rsa     // generate ssh private and public key pair
ssh -T git@github.com  // test whether set the github SSH OK 

